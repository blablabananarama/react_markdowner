{"ast":null,"code":"var _jsxFileName = \"/Users/jonas/Documents/react_markdowner/react-markdowner/src/App.js\";\nimport React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport MarkdownRenderer from \"react-markdown-renderer\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport theme from \"@rebass/preset\";\nimport { Flex, Box } from \"rebass\";\n\nclass App extends React.Component() {\n  //const [markdown, setMarkdown] = React.useState(\"\");\n  constructor(props) {\n    super(props);\n\n    this.handleMarkdownChange = event => {\n      this.setState({\n        markdown: event.target.value\n      });\n    };\n\n    state = {\n      mardown: \"\"\n    };\n    this.handleMarkdownChange = this.handleMarkdownChange.bind(this);\n  }\n\n  /*\n  ws = new WebSocket('ws://localhost:3000/ws')\n     componentDidMount() {\n        this.ws.onopen = () => {\n        // on connecting, do nothing but log it to the console\n        console.log('connected')\n        }\n         this.ws.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const message = JSON.parse(evt.data)\n        this.setState({dataFromServer: message})\n        console.log(message)\n        }\n         this.ws.onclose = () => {\n        console.log('disconnected')\n        // automatically try to reconnect on connection loss\n         }\n        */\n  render() {\n    return React.createElement(\"div\", {\n      id: \"root\",\n      style: {\n        display: \"flex\",\n        width: \"100%\",\n        height: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(ThemeProvider, {\n      theme: theme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Flex, {\n      flexDirection: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Box, {\n      p: 3,\n      width: 1 / 2,\n      color: \"white\",\n      bg: \"primary\",\n      flexGrow: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      value: this.state.markdown,\n      onChange: this.handleMarkdownChange,\n      style: {\n        fontFamily: \"Helvetica\",\n        color: \"white\",\n        border: \"none\",\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"transparent\",\n        outline: \"none\",\n        resize: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    })), React.createElement(Box, {\n      p: 3,\n      width: 1 / 2,\n      color: \"white\",\n      bg: \"primary\",\n      flexGrow: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(MarkdownRenderer, {\n      markdown: markdown,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jonas/Documents/react_markdowner/react-markdowner/src/App.js"],"names":["React","MarkdownRenderer","ThemeProvider","theme","Flex","Box","App","Component","constructor","props","handleMarkdownChange","event","setState","markdown","target","value","state","mardown","bind","render","display","width","height","fontFamily","color","border","backgroundColor","outline","resize"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,WAAP;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,QAA1B;;AAEA,MAAMC,GAAN,SAAkBN,KAAK,CAACO,SAAN,EAAlB,CAAqC;AACnC;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SAQlBC,oBARkB,GAQKC,KAAK,IAAI;AAC9B,WAAKC,QAAL,CAAc;AAAEC,QAAAA,QAAQ,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAAzB,OAAd;AACD,KAViB;;AAEhBC,IAAAA,KAAK,GAAG;AACNC,MAAAA,OAAO,EAAE;AADH,KAAR;AAGA,SAAKP,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BQ,IAA1B,CAA+B,IAA/B,CAA5B;AACD;;AAKD;;;;;;;;;;;;;;;;;;AAsBAC,EAAAA,MAAM,GAAE;AACR,WACE;AAAK,MAAA,EAAE,EAAC,MAAR;AAAe,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,KAAK,EAAE,MAA1B;AAAkCC,QAAAA,MAAM,EAAE;AAA1C,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAe,MAAA,KAAK,EAAEnB,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,aAAa,EAAE,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAK,MAAA,CAAC,EAAE,CAAR;AAAW,MAAA,KAAK,EAAE,IAAI,CAAtB;AAAyB,MAAA,KAAK,EAAC,OAA/B;AAAuC,MAAA,EAAE,EAAC,SAA1C;AAAoD,MAAA,QAAQ,EAAE,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,KAAK,EAAE,KAAKa,KAAL,CAAWH,QADpB;AAEE,MAAA,QAAQ,EAAE,KAAKH,oBAFjB;AAGE,MAAA,KAAK,EAAE;AACLa,QAAAA,UAAU,EAAE,WADP;AAELC,QAAAA,KAAK,EAAE,OAFF;AAGLC,QAAAA,MAAM,EAAE,MAHH;AAILJ,QAAAA,KAAK,EAAE,MAJF;AAKLC,QAAAA,MAAM,EAAE,MALH;AAMLI,QAAAA,eAAe,EAAE,aANZ;AAOLC,QAAAA,OAAO,EAAE,MAPJ;AAQLC,QAAAA,MAAM,EAAE;AARH,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAiBE,oBAAC,GAAD;AAAK,MAAA,CAAC,EAAE,CAAR;AAAW,MAAA,KAAK,EAAE,IAAI,CAAtB;AAAyB,MAAA,KAAK,EAAC,OAA/B;AAAuC,MAAA,EAAE,EAAC,SAA1C;AAAoD,MAAA,QAAQ,EAAE,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AAAkB,MAAA,QAAQ,EAAEf,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAjBF,CADF,CADF,CADF;AA2BD;;AA/DoC;;AAkErC,eAAeP,GAAf","sourcesContent":["import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport MarkdownRenderer from \"react-markdown-renderer\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport theme from \"@rebass/preset\";\nimport { Flex, Box } from \"rebass\";\n\nclass App extends React.Component () {\n  //const [markdown, setMarkdown] = React.useState(\"\");\n  constructor(props){\n    super(props);\n    state = {\n      mardown: \"\"\n    }\n    this.handleMarkdownChange = this.handleMarkdownChange.bind(this)\n  }\n\n  handleMarkdownChange = event => {\n    this.setState({ markdown: event.target.value });\n  };\n  /*\n  ws = new WebSocket('ws://localhost:3000/ws')\n\n    componentDidMount() {\n        this.ws.onopen = () => {\n        // on connecting, do nothing but log it to the console\n        console.log('connected')\n        }\n\n        this.ws.onmessage = evt => {\n        // listen to data sent from the websocket server\n        const message = JSON.parse(evt.data)\n        this.setState({dataFromServer: message})\n        console.log(message)\n        }\n\n        this.ws.onclose = () => {\n        console.log('disconnected')\n        // automatically try to reconnect on connection loss\n\n        }\n        */\n  render(){\n  return (\n    <div id=\"root\" style={{ display: \"flex\", width: \"100%\", height: \"100%\" }}>\n      <ThemeProvider theme={theme}>\n        <Flex flexDirection={\"column\"}>\n          <Box p={3} width={1 / 2} color=\"white\" bg=\"primary\" flexGrow={1}>\n            <textarea\n              value={this.state.markdown}\n              onChange={this.handleMarkdownChange}\n              style={{\n                fontFamily: \"Helvetica\",\n                color: \"white\",\n                border: \"none\",\n                width: \"100%\",\n                height: \"100%\",\n                backgroundColor: \"transparent\",\n                outline: \"none\",\n                resize: \"none\"\n              }}\n            ></textarea>\n          </Box>\n          <Box p={3} width={1 / 2} color=\"white\" bg=\"primary\" flexGrow={1}>\n            <MarkdownRenderer markdown={markdown} />\n          </Box>\n        </Flex>\n      </ThemeProvider>\n    </div>\n  );\n};\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}