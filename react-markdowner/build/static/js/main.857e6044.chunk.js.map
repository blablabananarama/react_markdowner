{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","ws","WebSocket","handleMarkdownChange","event","setState","markdown","target","value","send","JSON","stringify","message","state","handleDocumentTitleChange","documentTitle","console","log","bind","downloadMd","expRef","React","createRef","this","onopen","evt","onmessage","parse","data","onclose","text","blob","Blob","type","a","document","createElement","download","href","URL","createObjectURL","dataset","downloadurl","join","style","display","body","appendChild","click","removeChild","setTimeout","revokeObjectURL","id","width","height","theme","flexDirection","flexShrink","px","py","fontSize","fontWeight","color","onChange","placeholder","border","backgroundColor","outline","flexGrow","p","bg","autoFocus","fontFamily","resize","justifyContent","alignItems","ref","targetRef","filename","toPdf","onClick","sx","transition","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.857e6044.chunk.js","sourcesContent":["import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport MarkdownRenderer from \"react-markdown-renderer\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport theme from \"@rebass/preset\";\nimport { Flex, Box, Text, Button } from \"rebass\";\nimport socketIOClient from \"socket.io-client\";\nimport Pdf from \"react-to-pdf\";\n\nclass App extends React.Component {\n  //const [markdown, setMarkdown] = React.useState(\"\");\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: \"\",\n      documentTitle: \"\"\n    };\n    this.handleMarkdownChange = this.handleMarkdownChange.bind(this);\n    this.downloadMd = this.downloadMd.bind(this);\n    this.expRef = React.createRef();\n  }\n\n  ws = new WebSocket(\"ws://192.168.1.13:8765/\");\n\n  componentWillMount() {\n    this.ws.onopen = evt => {\n      // on connecting, do nothing but log it to the console\n      console.log(\"connected\");\n      //console.log(evt)\n      //this.setState({markdown: evt.data.value})\n    };\n\n    this.ws.onmessage = evt => {\n      // listen to data sent from the websocket server\n      //const message = JSON.parse(evt.data)\n      console.log(JSON.parse(evt.data)[\"value\"]);\n      const message = JSON.parse(evt.data)[\"value\"];\n      this.setState({ markdown: message });\n    };\n\n    this.ws.onclose = () => {\n      console.log(\"disconnected\");\n      // automatically try to reconnect on connection loss\n    };\n  }\n\n  handleMarkdownChange = event => {\n    this.setState({ markdown: event.target.value }, () => {\n      //console.log(JSON.stringify({\"message\": this.state.markdown}));\n      this.ws.send(JSON.stringify({ message: this.state.markdown }));\n    });\n  };\n\n  handleDocumentTitleChange = event => {\n    this.setState({ documentTitle: event.target.value }, () => {\n      //console.log(JSON.stringify({\"message\": this.state.markdown}));\n      //this.ws.send(JSON.stringify({ message: this.state.markdown }));\n      console.log(\"banana\")\n    });\n  };\n\n  downloadMd() {\n    var text = this.state.markdown;\n    var blob = new Blob([text], { type: \".md\" });\n\n    var a = document.createElement(\"a\");\n    a.download = this.state.documentTitle + \".md\";\n    a.href = URL.createObjectURL(blob);\n    a.dataset.downloadurl = [\".md\", a.download, a.href].join(\":\");\n    a.style.display = \"none\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    setTimeout(function() {\n      URL.revokeObjectURL(a.href);\n    }, 1500);\n  }\n\n  render() {\n    return (\n      <div id=\"root\" style={{ display: \"flex\", width: \"100%\", height: \"100%\" }}>\n        <ThemeProvider theme={theme}>\n          <Flex flexDirection={\"column\"}>\n            <Flex flexShrink={1}>\n              <Box px={2} py={1} width={1}>\n                <Text fontSize={[3, 4, 5]} fontWeight=\"bold\" color=\"primary\">\n                  Simple markdown preview app\n                </Text>\n                <input\n                  value={this.state.documentTitle}\n                  onChange={this.handleDocumentTitleChange}\n                  placeholder=\"Document Name\"\n                  style={{\n                    fontWeight: \"bold\",\n                    fontSize: \"48px\",\n                    border: \"none\",\n                    backgroundColor: \"transparent\",\n                    outline: \"none\"\n                  }}\n                />\n              </Box>\n            </Flex>\n            <Flex flexGrow={1}>\n              <Box p={3} width={1 / 2} color=\"white\" bg=\"primary\" flexGrow={1}>\n                <textarea\n                  autoFocus\n                  value={this.state.markdown}\n                  onChange={this.handleMarkdownChange}\n                  style={{\n                    fontFamily: \"Helvetica\",\n                    color: \"white\",\n                    border: \"none\",\n                    width: \"100%\",\n                    height: \"100%\",\n                    backgroundColor: \"transparent\",\n                    outline: \"none\",\n                    resize: \"none\"\n                  }}\n                ></textarea>\n              </Box>\n              <Flex\n                p={3}\n                width={1 / 2}\n                color=\"black\"\n                bg=\"muted\"\n                flexDirection={\"column\"}\n                justifyContent={\"space-between\"}\n                alignItems={\"center\"}\n                flexGrow={1}\n              >\n                <Box px={2} py={1} width={1} flexGrow={1} ref={this.expRef}>\n                  <MarkdownRenderer markdown={this.state.markdown} />\n                </Box>\n                <Flex\n                  px={2}\n                  py={1}\n                  width={1}\n                  flexShrink={1}\n                  justifyContent={\"space-around\"}\n                >\n                  <Pdf targetRef={this.expRef} filename={this.state.documentTitle + \".pdf\"}>\n                    {({ toPdf }) => (\n                      <Button\n                        onClick={toPdf}\n                        sx={{\n                          transition: \"0.4s\",\n                          \":hover\": {\n                            backgroundColor: \"tomato\",\n                            transition: \"0.2s\"\n                          }\n                        }}\n                      >\n                        Download as PDF\n                      </Button>\n                    )}\n                  </Pdf>\n                  <Button\n                    onClick={this.downloadMd}\n                    sx={{\n                      transition: \"0.4s\",\n                      \":hover\": {\n                        backgroundColor: \"tomato\",\n                        transition: \"0.2s\"\n                      }\n                    }}\n                  >\n                    Download as .md\n                  </Button>\n                </Flex>\n              </Flex>\n            </Flex>\n          </Flex>\n        </ThemeProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}