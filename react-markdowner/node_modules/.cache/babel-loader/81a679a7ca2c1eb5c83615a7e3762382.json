{"ast":null,"code":"var _jsxFileName = \"/Users/jonas/Documents/react_markdowner/react-markdowner/src/App.js\";\nimport React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport MarkdownRenderer from \"react-markdown-renderer\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport theme from \"@rebass/preset\";\nimport { Flex, Box, Text, Button } from \"rebass\";\nimport socketIOClient from \"socket.io-client\";\nimport Pdf from 'react-to-pdf';\n\nclass App extends React.Component {\n  //const [markdown, setMarkdown] = React.useState(\"\");\n  constructor(props) {\n    super(props);\n\n    this.handleMarkdownChange = event => {\n      this.setState({\n        markdown: event.target.value\n      }, () => {\n        //console.log(JSON.stringify({\"message\": this.state.markdown}));\n        this.ws.send(JSON.stringify({\n          message: this.state.markdown\n        }));\n      });\n    };\n\n    this.ws = new WebSocket(\"ws://192.168.1.13:8765/\");\n    this.state = {\n      markdown: \"\"\n    };\n    this.handleMarkdownChange = this.handleMarkdownChange.bind(this);\n    this.exp = React.createRef();\n  }\n\n  componentWillMount() {\n    this.ws.onopen = evt => {\n      // on connecting, do nothing but log it to the console\n      console.log(\"connected\"); //console.log(evt)\n      //this.setState({markdown: evt.data.value})\n    };\n\n    this.ws.onmessage = evt => {\n      // listen to data sent from the websocket server\n      //const message = JSON.parse(evt.data)\n      console.log(JSON.parse(evt.data)[\"value\"]);\n      const message = JSON.parse(evt.data)[\"value\"];\n      this.setState({\n        markdown: message\n      });\n    };\n\n    this.ws.onclose = () => {\n      console.log(\"disconnected\"); // automatically try to reconnect on connection loss\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"root\",\n      style: {\n        display: \"flex\",\n        width: \"100%\",\n        height: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Pdf, {\n      targetRef: ref,\n      filename: \"code-example.pdf\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, ({\n      toPdf\n    }) => React.createElement(\"button\", {\n      onClick: toPdf,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Generate Pdf\")), React.createElement(ThemeProvider, {\n      theme: theme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Flex, {\n      flexDirection: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Flex, {\n      flexShrink: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Box, {\n      px: 2,\n      py: 1,\n      width: 1 / 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Text, {\n      fontSize: [3, 4, 5],\n      fontWeight: \"bold\",\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Simple markdown preview app\"), React.createElement(Text, {\n      fontSize: [3, 4, 5],\n      fontWeight: \"bold\",\n      color: \"black\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Simple markdown preview app\")), React.createElement(Box, {\n      px: 2,\n      py: 1,\n      width: 1 / 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })), React.createElement(Flex, {\n      flexGrow: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Box, {\n      p: 3,\n      width: 1 / 2,\n      color: \"white\",\n      bg: \"primary\",\n      flexGrow: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      autoFocus: true,\n      value: this.state.markdown,\n      onChange: this.handleMarkdownChange,\n      style: {\n        fontFamily: \"Helvetica\",\n        color: \"white\",\n        border: \"none\",\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"transparent\",\n        outline: \"none\",\n        resize: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })), React.createElement(Flex, {\n      p: 3,\n      width: 1 / 2,\n      color: \"black\",\n      bg: \"muted\",\n      flexDirection: \"column\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      flexGrow: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Box, {\n      px: 2,\n      py: 1,\n      width: 1,\n      flexGrow: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(MarkdownRenderer, {\n      markdown: this.state.markdown,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    })), React.createElement(Flex, {\n      px: 2,\n      py: 1,\n      width: 1,\n      flexShrink: 1,\n      justifyContent: \"space-around\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: () => console.log(\"log this bitch!\"),\n      sx: {\n        transition: \"0.4s\",\n        \":hover\": {\n          backgroundColor: \"tomato\",\n          transition: \"0.2s\"\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Download as PDF\"), React.createElement(Button, {\n      onClick: () => console.log(\"log this bitch!\"),\n      sx: {\n        transition: \"0.4s\",\n        \":hover\": {\n          backgroundColor: \"tomato\",\n          transition: \"0.2s\"\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Download as TXT\")))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jonas/Documents/react_markdowner/react-markdowner/src/App.js"],"names":["React","MarkdownRenderer","ThemeProvider","theme","Flex","Box","Text","Button","socketIOClient","Pdf","App","Component","constructor","props","handleMarkdownChange","event","setState","markdown","target","value","ws","send","JSON","stringify","message","state","WebSocket","bind","exp","createRef","componentWillMount","onopen","evt","console","log","onmessage","parse","data","onclose","render","display","width","height","ref","toPdf","fontFamily","color","border","backgroundColor","outline","resize","transition"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport MarkdownRenderer from \"react-markdown-renderer\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport theme from \"@rebass/preset\";\nimport { Flex, Box, Text, Button } from \"rebass\";\nimport socketIOClient from \"socket.io-client\";\nimport Pdf from 'react-to-pdf';\n\nclass App extends React.Component {\n  //const [markdown, setMarkdown] = React.useState(\"\");\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: \"\"\n    };\n    this.handleMarkdownChange = this.handleMarkdownChange.bind(this);\n    this.exp = React.createRef();\n  }\n\n  handleMarkdownChange = event => {\n    this.setState({ markdown: event.target.value }, () => {\n      //console.log(JSON.stringify({\"message\": this.state.markdown}));\n      this.ws.send(JSON.stringify({ message: this.state.markdown }));\n    });\n  };\n\n  ws = new WebSocket(\"ws://192.168.1.13:8765/\");\n\n  componentWillMount() {\n    this.ws.onopen = evt => {\n      // on connecting, do nothing but log it to the console\n      console.log(\"connected\");\n      //console.log(evt)\n      //this.setState({markdown: evt.data.value})\n    };\n\n    this.ws.onmessage = evt => {\n      // listen to data sent from the websocket server\n      //const message = JSON.parse(evt.data)\n      console.log(JSON.parse(evt.data)[\"value\"]);\n      const message = JSON.parse(evt.data)[\"value\"];\n      this.setState({ markdown: message });\n    };\n\n    this.ws.onclose = () => {\n      console.log(\"disconnected\");\n      // automatically try to reconnect on connection loss\n    };\n  }\n\n  render() {\n    return (\n      <div id=\"root\" style={{ display: \"flex\", width: \"100%\", height: \"100%\" }}>\n        <Pdf targetRef={ref} filename=\"code-example.pdf\">\n        {({ toPdf }) => <button onClick={toPdf}>Generate Pdf</button>}\n      </Pdf>\n        <ThemeProvider theme={theme}>\n          <Flex flexDirection={\"column\"}>\n            <Flex flexShrink={1}>\n              <Box px={2} py={1} width={1 / 2}>\n                <Text fontSize={[3, 4, 5]} fontWeight=\"bold\" color=\"primary\">\n                  Simple markdown preview app\n                </Text>\n                <Text fontSize={[3, 4, 5]} fontWeight=\"bold\" color=\"black\">\n                  Simple markdown preview app\n                </Text>\n              </Box>\n              <Box px={2} py={1} width={1 / 2}></Box>\n            </Flex>\n            <Flex flexGrow={1}>\n              <Box p={3} width={1 / 2} color=\"white\" bg=\"primary\" flexGrow={1}>\n                <textarea\n                  autoFocus\n                  value={this.state.markdown}\n                  onChange={this.handleMarkdownChange}\n                  style={{\n                    fontFamily: \"Helvetica\",\n                    color: \"white\",\n                    border: \"none\",\n                    width: \"100%\",\n                    height: \"100%\",\n                    backgroundColor: \"transparent\",\n                    outline: \"none\",\n                    resize: \"none\"\n                  }}\n                ></textarea>\n              </Box>\n              <Flex\n                p={3}\n                width={1 / 2}\n                color=\"black\"\n                bg=\"muted\"\n                flexDirection={\"column\"}\n                justifyContent={\"space-between\"}\n                alignItems={\"center\"}\n                flexGrow={1}\n              >\n                <Box px={2} py={1} width={1} flexGrow={1}>\n                  <MarkdownRenderer markdown={this.state.markdown} />\n                </Box>\n                <Flex px={2} py={1} width={1} flexShrink={1} justifyContent={\"space-around\"}>\n                  <Button\n                    onClick={() => console.log(\"log this bitch!\")}\n                    sx={{\n                      transition: \"0.4s\",\n                      \":hover\": {\n                        backgroundColor: \"tomato\",\n                        transition: \"0.2s\"\n                      }\n                    }}\n                  >\n                    Download as PDF\n                  </Button>\n                  <Button\n                    onClick={() => console.log(\"log this bitch!\")}\n                    sx={{\n                      transition: \"0.4s\",\n                      \":hover\": {\n                        backgroundColor: \"tomato\",\n                        transition: \"0.2s\"\n                      }\n                    }}\n                  >\n                    Download as TXT\n                  </Button>\n                </Flex>\n              </Flex>\n            </Flex>\n          </Flex>\n        </ThemeProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}