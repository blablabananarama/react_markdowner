{"ast":null,"code":"var _jsxFileName = \"/Users/jonas/Documents/react_markdowner/react-markdowner/src/App.js\";\nimport React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport MarkdownRenderer from \"react-markdown-renderer\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport theme from \"@rebass/preset\";\nimport { Flex, Box } from \"rebass\";\nimport socketIOClient from \"socket.io-client\";\n\nclass App extends React.Component {\n  //const [markdown, setMarkdown] = React.useState(\"\");\n  constructor(props) {\n    super(props);\n\n    this.handleMarkdownChange = event => {\n      this.setState({\n        markdown: event.target.value\n      }, () => {\n        this.ws.send(this);\n      });\n    };\n\n    this.ws = new WebSocket('ws://localhost:8765/');\n    this.state = {\n      mardown: ''\n    };\n    this.handleMarkdownChange = this.handleMarkdownChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.ws.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected');\n\n      try {\n        this.ws.send(\"Jonas\"); //send data to the server\n      } catch (error) {\n        console.log(error); // catch error\n      }\n    };\n\n    this.ws.onmessage = evt => {\n      // listen to data sent from the websocket server\n      const message = JSON.parse(evt.data);\n      this.setState({\n        dataFromServer: message\n      });\n      console.log(message);\n    };\n\n    this.ws.onclose = () => {\n      console.log('disconnected'); // automatically try to reconnect on connection loss\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"root\",\n      style: {\n        display: \"flex\",\n        width: \"100%\",\n        height: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(ThemeProvider, {\n      theme: theme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Flex, {\n      flexDirection: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Box, {\n      p: 3,\n      width: 1 / 2,\n      color: \"white\",\n      bg: \"primary\",\n      flexGrow: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      value: this.state.markdown,\n      onChange: this.handleMarkdownChange,\n      style: {\n        fontFamily: \"Helvetica\",\n        color: \"white\",\n        border: \"none\",\n        width: \"100%\",\n        height: \"100%\",\n        backgroundColor: \"transparent\",\n        outline: \"none\",\n        resize: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })), React.createElement(Box, {\n      p: 3,\n      width: 1 / 2,\n      color: \"white\",\n      bg: \"primary\",\n      flexGrow: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(MarkdownRenderer, {\n      markdown: this.state.markdown,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jonas/Documents/react_markdowner/react-markdowner/src/App.js"],"names":["React","MarkdownRenderer","ThemeProvider","theme","Flex","Box","socketIOClient","App","Component","constructor","props","handleMarkdownChange","event","setState","markdown","target","value","ws","send","WebSocket","state","mardown","bind","componentDidMount","onopen","console","log","error","onmessage","evt","message","JSON","parse","data","dataFromServer","onclose","render","display","width","height","fontFamily","color","border","backgroundColor","outline","resize"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,WAAP;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,QAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,GAAN,SAAkBP,KAAK,CAACQ,SAAxB,CAAkC;AAChC;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAQnBC,oBARmB,GAQIC,KAAK,IAAI;AAC9B,WAAKC,QAAL,CAAc;AAAEC,QAAAA,QAAQ,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAAzB,OAAd,EAAgD,MAAM;AACpD,aAAKC,EAAL,CAAQC,IAAR,CAAa,IAAb;AACD,OAFD;AAGD,KAZkB;;AAAA,SAcnBD,EAdmB,GAcd,IAAIE,SAAJ,CAAc,sBAAd,CAdc;AAEjB,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE;AADE,KAAb;AAGA,SAAKV,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BW,IAA1B,CAA+B,IAA/B,CAA5B;AACD;;AAUDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKN,EAAL,CAAQO,MAAR,GAAiB,MAAM;AACvB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;;AACA,UAAI;AACF,aAAKT,EAAL,CAAQC,IAAR,CAAa,OAAb,EADE,CACoB;AACzB,OAFC,CAEA,OAAOS,KAAP,EAAc;AACZF,QAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ,EADY,CACO;AACtB;AACE,KARD;;AAUA,SAAKV,EAAL,CAAQW,SAAR,GAAoBC,GAAG,IAAI;AAC3B;AACA,YAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACI,IAAf,CAAhB;AACA,WAAKpB,QAAL,CAAc;AAACqB,QAAAA,cAAc,EAAEJ;AAAjB,OAAd;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYI,OAAZ;AACC,KALD;;AAOA,SAAKb,EAAL,CAAQkB,OAAR,GAAkB,MAAM;AACxBV,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EADwB,CAExB;AAEC,KAJD;AAMH;;AAGDU,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,EAAE,EAAC,MAAR;AAAe,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,KAAK,EAAE,MAA1B;AAAkCC,QAAAA,MAAM,EAAE;AAA1C,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAe,MAAA,KAAK,EAAEpC,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAM,MAAA,aAAa,EAAE,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAK,MAAA,CAAC,EAAE,CAAR;AAAW,MAAA,KAAK,EAAE,IAAI,CAAtB;AAAyB,MAAA,KAAK,EAAC,OAA/B;AAAuC,MAAA,EAAE,EAAC,SAA1C;AAAoD,MAAA,QAAQ,EAAE,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,KAAK,EAAE,KAAKiB,KAAL,CAAWN,QADpB;AAEE,MAAA,QAAQ,EAAE,KAAKH,oBAFjB;AAGE,MAAA,KAAK,EAAE;AACL6B,QAAAA,UAAU,EAAE,WADP;AAELC,QAAAA,KAAK,EAAE,OAFF;AAGLC,QAAAA,MAAM,EAAE,MAHH;AAILJ,QAAAA,KAAK,EAAE,MAJF;AAKLC,QAAAA,MAAM,EAAE,MALH;AAMLI,QAAAA,eAAe,EAAE,aANZ;AAOLC,QAAAA,OAAO,EAAE,MAPJ;AAQLC,QAAAA,MAAM,EAAE;AARH,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAiBE,oBAAC,GAAD;AAAK,MAAA,CAAC,EAAE,CAAR;AAAW,MAAA,KAAK,EAAE,IAAI,CAAtB;AAAyB,MAAA,KAAK,EAAC,OAA/B;AAAuC,MAAA,EAAE,EAAC,SAA1C;AAAoD,MAAA,QAAQ,EAAE,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,gBAAD;AAAkB,MAAA,QAAQ,EAAE,KAAKzB,KAAL,CAAWN,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAjBF,CADF,CADF,CADF;AA2BD;;AAzE+B;;AA4ElC,eAAeP,GAAf","sourcesContent":["import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport MarkdownRenderer from \"react-markdown-renderer\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport theme from \"@rebass/preset\";\nimport { Flex, Box } from \"rebass\";\nimport socketIOClient from \"socket.io-client\";\n\nclass App extends React.Component {\n  //const [markdown, setMarkdown] = React.useState(\"\");\n  constructor(props) {\n    super(props);\n    this.state = {\n      mardown: ''\n    };\n    this.handleMarkdownChange = this.handleMarkdownChange.bind(this);\n  }\n\n  handleMarkdownChange = event => {\n    this.setState({ markdown: event.target.value }, () => {\n      this.ws.send(this)\n    });\n  };\n  \n  ws = new WebSocket('ws://localhost:8765/')\n\n  componentDidMount() {\n      this.ws.onopen = () => {\n      // on connecting, do nothing but log it to the console\n      console.log('connected')\n      try {\n        this.ws.send(\"Jonas\") //send data to the server\n    } catch (error) {\n        console.log(error) // catch error\n    }\n      }\n\n      this.ws.onmessage = evt => {\n      // listen to data sent from the websocket server\n      const message = JSON.parse(evt.data)\n      this.setState({dataFromServer: message})\n      console.log(message)\n      }\n\n      this.ws.onclose = () => {\n      console.log('disconnected')\n      // automatically try to reconnect on connection loss\n\n      }\n\n  }\n\n        \n  render() {\n    return (\n      <div id=\"root\" style={{ display: \"flex\", width: \"100%\", height: \"100%\" }}>\n        <ThemeProvider theme={theme}>\n          <Flex flexDirection={\"column\"}>\n            <Box p={3} width={1 / 2} color=\"white\" bg=\"primary\" flexGrow={1}>\n              <textarea\n                value={this.state.markdown}\n                onChange={this.handleMarkdownChange}\n                style={{\n                  fontFamily: \"Helvetica\",\n                  color: \"white\",\n                  border: \"none\",\n                  width: \"100%\",\n                  height: \"100%\",\n                  backgroundColor: \"transparent\",\n                  outline: \"none\",\n                  resize: \"none\"\n                }}\n              ></textarea>\n            </Box>\n            <Box p={3} width={1 / 2} color=\"white\" bg=\"primary\" flexGrow={1}>\n              <MarkdownRenderer markdown={this.state.markdown} />\n            </Box>\n          </Flex>\n        </ThemeProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}